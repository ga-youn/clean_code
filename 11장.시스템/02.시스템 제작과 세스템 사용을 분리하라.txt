소프트웨어 시스템은 (애플리케이션 객체를 제작하고 의존성을 서로 연결하는) 준비과정과 (준비과정 이후에 이어지는) 런타임 로직을 분리해야 한다.

관심사 분리는 가장 오래되고 가장 중요한 설계 기법 중 하나.

//초기화 지연 혹은 계산 지연 기법
public Service getService(){
    if(service == null)
        service = new MyServiceImpl(...); //모든 상황에 적합한 기본값일까?
    return service;
}

장점1. 실제로 필요할 때가지 객체를 생성하지 않으므로 불필요한 부하가 걸리지 않는다. -> 따라서 애플리케이션을 시작하는 시간이 빨라짐
장점2. 어떤 경우에도 null 포인터를 반환하지 않는다.

단점1. getService 메서드가 MyServiceImpl과 (위에서 생략한) 생성자 인수에 명시적으로 의존한다.
-> 런타임 로직에서 MyServiceImpl 객체를 전혀 사용하지 않더라도 의존성을 해결하지 않으면 컴파일이 안된다.
단점2. MyServiceImpl이 무거운 객체라면 단위 테스트에서 getService 메서드를 호출하기 전에 적절한 테스트 전용 객체를 service필드에 할당해야한다.
단점3. 일반 런타임 로직에다 객체 생성 로직을 섞어놓은 탓에(service가 null인 경로와 null 이 아닌 경로 등) 모든 실행 경로도 테스트해야한다.
-> 책임이 둘이라는 말은 메서드가 작업을 두 가지 이상 수행한다는 의미이다. -> SRP 에 위배
단점4. 무엇보다 MyServiceImpl이 모든 상황에 적합한 객체인지 모른다는 사실이 가장 큰 우려

Main 분리

시스템 생성과 시스템 사용을 분리하는 한 가지 방법으로, 
생성과 관련한 코드는 모드 main이나 main이 호출하는 모듈로 옮기고 나머지 시스템은 모든 객체가 생상되었고 모든 의존성이 연결되었다고 가정한다.

팩토리

물론 때로는 객체가 생성되는 시점을 애플리케이션이 결정할 필요도 생긴다.

